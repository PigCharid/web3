{
	"compiler": {
		"version": "0.8.13+commit.abaa5c0e"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "transactions",
						"type": "bytes"
					}
				],
				"name": "multiSend",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "Stefan George - <stefan@gnosis.io>Richard Meissner - <richard@gnosis.io>",
			"kind": "dev",
			"methods": {
				"multiSend(bytes)": {
					"details": "Sends multiple transactions and reverts all if one fails.",
					"params": {
						"transactions": "Encoded transactions. Each transaction is encoded as a packed bytes of                     operation has to be uint8(0) in this version (=> 1 byte),                     to as a address (=> 20 bytes),                     value as a uint256 (=> 32 bytes),                     data length as a uint256 (=> 32 bytes),                     data as bytes.                     see abi.encodePacked for more information on packed encoding"
					}
				}
			},
			"title": "Multi Send Call Only - Allows to batch multiple transactions into one, but only calls",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"multiSend(bytes)": {
					"notice": "The code is for most part the same as the normal MultiSend (to keep compatibility),         but reverts if a transaction tries to use a delegatecall.This method is payable as delegatecalls keep the msg.value from the previous call         If the calling method (e.g. execTransaction) received ETH this would revert otherwise"
				}
			},
			"notice": "The guard logic is not required here as this contract doesn't support nested delegate calls",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"multicall.sol": "MultiSendCallOnly"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"multicall.sol": {
			"keccak256": "0x2c1b86db5d2f25508a012e5cd07740e7f09cf88d532ca523d6f3be7b94f87a38",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://a6c286d32de752e0df6ca969224b185e9393d2ff232a5de2a57a227319d7a5e5",
				"dweb:/ipfs/QmatevvwgP6mPFDg24ePUqJqgWh4g7uRRYXhLob2NxQt4w"
			]
		}
	},
	"version": 1
}